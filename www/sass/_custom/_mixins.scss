/* 
* Set a rem font size with pixel fallback
*   -Usage: @include font-size(14px)
*/

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

/* 
* Breakpoints
*   -Usage: @include bp-small {
*       -css  
*     }
*/

@mixin bp-large {
  @media only screen and (min-width: $tablet) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (min-width: $mobile) and (max-width: $tablet) {
    @content;
  }
}

@mixin bp-medium-down{
  @media only screen and (max-width: $tablet) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (min-width: $mobile) {
    @content;
  }
}

@mixin bp-small-only{
  @media only screen and (max-width: $mobile) {
    @content;
  }
}

/* 
* SVG background images with PNG and retina fallback
*   -Usage: @include background-image('img_name');
*/

$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false){
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size){
        background-size: $size;
    }
    .no-svg &{
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

/* 
* Animations and keyframes
*   -Usage: 
* @include keyframes(slide-down) {
*   0% { opacity: 1; }
*   90% { opacity: 0; }
* }
* .element {
*   Animation Name / Duration / Repeating times (leave blank for once)
*   @include animation('slide-down 5s 3');
* }
*/

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

/* 
* Transitions
*   -Usage: 
* .element {
*   @include transition(color .3s ease);
* }
*/

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/* 
* Transforms
*/

@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}

/* 
* Rotate mixin
*   -Usage: @include rotate(25);
*/
// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

/* 
* Cross browser opacity (IE5)
*   -Usage:  @include opacity(0.8);
*/

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/* 
* Cross browser inline-block (IE6)
*   -Usage:  @include inline-block;
*/

@mixin inline-block {
  display: -moz-inline-stack; // ff 2
  display: inline-block;
  zoom:1; *display: inline; // ie 6-7
}

/* 
* Cross browser border radius
*   -Usage:  @include border-radius(10px);
*/

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

/* 
* Cross browser box-shadow
*   -Usage:  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
*/

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

/* 
* Cross gradient
*   -Usage:  @include gradient(#000000, #dddddd);
*/

@mixin gradient($from-color, $to-color) {
    background-color: mix($from-color, $to-color); /* Fallback */
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from-color), to($to-color));
    background-image: -webkit-linear-gradient(top, $from-color, $to-color); 
    background-image:    -moz-linear-gradient(top, $from-color, $to-color);
    background-image:     -ms-linear-gradient(top, $from-color, $to-color);
    background-image:      -o-linear-gradient(top, $from-color, $to-color);
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$from-color}', EndColorStr='#{$to-color}')";
}

/* 
* Col Builder
*   -Usage:  @include col(1, 3, 1em, top, $first: true)
*/

@mixin col($col, $sum, $gap: 1em, $align: top, $first: false, $last: false) {
  @include inline-block;
  margin-left: if($first, 0, $gap);
  width: percentage($col/$sum) - $gap;
  vertical-align: $align;
}

/* 
* centerer
*   -Usage:  @include centerer(true, false);
*/

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
    -ms-transform: translate(-50%, 0);
    -webkit-transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
    -ms-transform: translate(0, -50%);
    -webkit-transform: translate(0, -50%);
  }
}

/* 
* Icomoon
*   -Usage:  @include icomoon;
*/

@mixin icomoon(){
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* 
* Aspect Ratio
*   -Usage:  @include aspect-ratio(16, 9);
*/

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}